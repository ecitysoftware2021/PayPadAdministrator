@model PayPlusModels.Device_PayPad_Detail_ViewModel
@using Newtonsoft.Json;

<div class="row">
    <div class="col-sm-12">
        <div class="card-box">
            <div class="row">
                <div class="col-md-12">
                    <h4 class="m-t-0 header-title">Denominación <b>@Model.CURRENCY_VALUE</b></h4>
                    <div class="form-horizontal">
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.CURRENCY_DENOMINATION_ID)
                        @Html.HiddenFor(model => model.DEVICE_PAYPAD_DETAIL_ID)
                        @Html.HiddenFor(model => model.DEVICE_PAYPAD_ID)
                        @Html.HiddenFor(model => model.STATE)

                        <div class="form-group">
                            @Html.LabelFor(model => model.CASHBOX_QUANTITY, htmlAttributes: new { @class = "col-sm-3 control-label" })
                            <div class="col-sm-9">
                                @Html.EditorFor(model => model.CASHBOX_QUANTITY, new { htmlAttributes = new { @class = "form-control tochpinPrueba" } })
                                @Html.ValidationMessageFor(model => model.CASHBOX_QUANTITY, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.STACKER_QUANTITY, htmlAttributes: new { @class = "col-sm-3 control-label" })
                            <div class="col-sm-9">
                                @Html.EditorFor(model => model.STACKER_QUANTITY, new { htmlAttributes = new { @class = "form-control tochpinPrueba" } })
                                @Html.ValidationMessageFor(model => model.STACKER_QUANTITY, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.MIN_STACKER_QUANTITY, htmlAttributes: new { @class = "col-sm-3 control-label" })
                            <div class="col-sm-9">
                                @Html.EditorFor(model => model.MIN_STACKER_QUANTITY, new { htmlAttributes = new { @class = "form-control tochpinPrueba" } })
                                @Html.ValidationMessageFor(model => model.MIN_STACKER_QUANTITY, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group m-b-0">
                            <div class="col-sm-offset-3 col-sm-9">
                                <button type="button" onclick="EditQuantitiesDevicePayPadP()" class="btn btn-info waves-effect waves-light">Guardar</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script type="text/javascript">
        function EditQuantitiesDevicePayPadP() {
            var json = {
                DEVICE_PAYPAD_DETAIL_ID: $("#DEVICE_PAYPAD_DETAIL_ID").val(),
                DEVICE_PAYPAD_ID: $("#DEVICE_PAYPAD_ID").val(),
                CURRENCY_DENOMINATION_ID: $("#CURRENCY_DENOMINATION_ID").val(),
                CASHBOX_QUANTITY: $("#CASHBOX_QUANTITY").val(),
                STACKER_QUANTITY: $("#STACKER_QUANTITY").val(),
                MIN_STACKER_QUANTITY: $("#MIN_STACKER_QUANTITY").val(),
                STATE: $("#STATE").val(),
            }

            $.ajax({
                type: 'POST',
                url: '@Url.Action("EditQuantitiesDevicePayPadP")',
                dataType: 'json',
                data: json,
                success: function (data) {
                    if (data.CodeError == 200){
                        MessageSuccess("¡Buen trabajo!","Se actualizó el registro correctamente");
                    }
                    else{
                        ModalMessageError("Error", data.Message);
                    }
                },
                error: function (ex) {
                    ModalMessageError("Error", 'Failed ' + ex.statusText);
                }
            });
    }
</script>
